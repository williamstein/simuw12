Day 8: Elliptic Curve Diffie-Hellman -- a step-by-step tutorial

<p>In this step-by-step tutorial you and I will agree on a secret key, then you will encrypt and send me a message. &nbsp;Everybody should follow along.&nbsp;</p>
<p>We will use IRC (=internet relay chat) to send messages. &nbsp;</p>
<p><strong>Step 1:</strong> Join the <a href="http://sagemath.org/help-irc.html" target="_blank">Sage IRC chatroom</a>.&nbsp;</p>
<p><strong>Step 2:</strong> We agree on a random point on a random elliptic curve modulo a random prime, say this one:</p>

{{{id=5|
%auto
set_random_seed(6)
p = next_prime(10^8)
E = EllipticCurve(GF(p), [randrange(p), randrange(p)])
P = E.random_point()
E
///
}}}

{{{id=6|
P
///
}}}

{{{id=4|
print E.cardinality().factor()
print P.order().factor()
///
}}}

<p><strong>Step 3</strong>: I will create a random integer $n$ and publish $nP$ in the chatroom.</p>

{{{id=2|
set_random_seed(walltime())
n = randrange(P.order())
nP = n*P
list(nP)
///
}}}

<p>Then you construct my point in your Sage session:</p>

{{{id=8|
nP = E([61555498, 66438167, 1])  # the point will be different than what I put here!
///
}}}

<p><strong>Step 4: </strong>You will create a random integer $m$, and at least one of you will publish $mP$ in the chatroom. &nbsp;For simplicity, I'll seed the random number generator, so everybody chooses the same $m$.</p>

{{{id=9|
set_random_seed(0)
m = randrange(P.order())
mP = m*P
list(mP)
///
}}}

{{{id=11|
mP = E([30489100, 75732970, 1])      # what I do
///
}}}

<p><strong>Step 5:</strong> We each compute the shared secret. &nbsp;I compute n*mP and you compute m*nP.</p>

{{{id=12|
secret = n*mP; secret        # what I do
///
}}}

{{{id=14|
secret = m*nP; secret        # what *YOU* do
///
}}}

{{{id=17|

///
}}}

<p><strong>Step 6:</strong> Use AES and base64 to send a secret message. &nbsp;&nbsp;</p>
<p>After computing secret above, evaluate the following cell. &nbsp;Then you have an intereact that you can paste messages into.</p>

{{{id=28|
from Crypto.Cipher import AES
from Crypto import Random
from base64 import encodestring, decodestring

@interact
def f(plain_text='', cipher_text=''):
    iv = Random.new().read(AES.block_size)
    cipher = AES.new(str(secret)[:24], AES.MODE_CFB, iv)
    if plain_text:
        print "Plain text encrypts as:\n<html><font color='black'>%s</font></html>"%(
                 encodestring(iv + cipher.encrypt(plain_text)).strip())
    if cipher_text:
        cipher_text = ''.join(cipher_text.split())
        print "Cipher decrypts to:\n<html><font color='red'>%s</font></html>"%(
                cipher.decrypt(decodestring(cipher_text))[len(iv):].strip())
///
}}}

{{{id=23|

///
}}}

{{{id=21|

///
}}}

{{{id=20|

///
}}}
